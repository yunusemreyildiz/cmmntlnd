#!/usr/bin/env python3
"""
App Review Monitor - Web UI
KullanÄ±cÄ±larÄ±n ayarlarÄ±nÄ± yapabileceÄŸi basit web arayÃ¼zÃ¼
"""

from flask import Flask, render_template, request, redirect, url_for, flash, jsonify
import os
import requests
from datetime import datetime
import threading
import time
import logging
from typing import Dict, List, Optional

# Logging yapÄ±landÄ±rmasÄ±
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.secret_key = os.getenv('FLASK_SECRET_KEY', 'app_review_monitor_secret_key_2024')

# Global deÄŸiÅŸkenler
monitor_thread: Optional[threading.Thread] = None
monitor_running: bool = False
logs: List[Dict] = []

class WebConfig:
    """Web UI iÃ§in konfigÃ¼rasyon yÃ¶netimi"""
    
    @staticmethod
    def read_env() -> Dict[str, str]:
        """Mevcut .env dosyasÄ±nÄ± oku"""
        config = {}
        try:
            if os.path.exists('.env'):
                with open('.env', 'r', encoding='utf-8') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#') and '=' in line:
                            key, value = line.split('=', 1)
                            config[key] = value
        except Exception as e:
            logger.error(f"KonfigÃ¼rasyon okuma hatasÄ±: {e}")
        return config
    
    @staticmethod
    def write_env(config: Dict[str, str]) -> bool:
        """KonfigÃ¼rasyonu .env dosyasÄ±na yaz"""
        try:
            with open('.env', 'w', encoding='utf-8') as f:
                f.write("# App Review Monitor Configuration\n")
                f.write("# Generated by Web UI\n\n")
                
                f.write("# Slack Configuration\n")
                f.write(f"SLACK_WEBHOOK_URL={config.get('SLACK_WEBHOOK_URL', '')}\n")
                f.write(f"SLACK_CHANNEL={config.get('SLACK_CHANNEL', '#app-reviews')}\n\n")
                
                f.write("# App Store Configuration\n")
                f.write(f"APP_STORE_APP_ID={config.get('APP_STORE_APP_ID', '')}\n")
                f.write(f"APP_STORE_COUNTRY={config.get('APP_STORE_COUNTRY', 'all')}\n\n")
                
                f.write("# Google Play Store Configuration\n")
                f.write(f"GOOGLE_PLAY_APP_ID={config.get('GOOGLE_PLAY_APP_ID', '')}\n")
                f.write(f"GOOGLE_PLAY_COUNTRY={config.get('GOOGLE_PLAY_COUNTRY', 'all')}\n\n")
                
                f.write("# Monitoring Configuration\n")
                f.write(f"CHECK_INTERVAL_MINUTES={config.get('CHECK_INTERVAL_MINUTES', '60')}\n")
                f.write(f"MAX_REVIEWS_PER_CHECK={config.get('MAX_REVIEWS_PER_CHECK', '10')}\n")
            return True
        except Exception as e:
            logger.error(f"KonfigÃ¼rasyon yazma hatasÄ±: {e}")
            return False

def add_log(message: str, level: str = 'info') -> None:
    """Log mesajÄ± ekle"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    logs.append({
        'timestamp': timestamp,
        'message': message,
        'level': level
    })
    # Son 100 log'u tut
    if len(logs) > 100:
        logs.pop(0)
    
    # Console'a da yazdÄ±r
    logger.info(f"[{timestamp}] {message}")

def validate_config(config: Dict[str, str]) -> List[str]:
    """KonfigÃ¼rasyon doÄŸrulama"""
    errors = []
    
    # Slack webhook URL kontrolÃ¼
    if not config.get('SLACK_WEBHOOK_URL'):
        errors.append("Slack Webhook URL gerekli")
    elif not config['SLACK_WEBHOOK_URL'].startswith('https://hooks.slack.com/'):
        errors.append("GeÃ§ersiz Slack Webhook URL formatÄ±")
    
    # App Store App ID kontrolÃ¼
    if not config.get('APP_STORE_APP_ID'):
        errors.append("App Store App ID gerekli")
    elif not config['APP_STORE_APP_ID'].isdigit():
        errors.append("App Store App ID sadece rakam olmalÄ±")
    
    # Google Play App ID kontrolÃ¼
    if not config.get('GOOGLE_PLAY_APP_ID'):
        errors.append("Google Play App ID gerekli")
    
    # Check interval kontrolÃ¼
    try:
        interval = int(config.get('CHECK_INTERVAL_MINUTES', '60'))
        if interval < 1 or interval > 1440:  # 1 dakika - 24 saat
            errors.append("Kontrol aralÄ±ÄŸÄ± 1-1440 dakika arasÄ±nda olmalÄ±")
    except ValueError:
        errors.append("Kontrol aralÄ±ÄŸÄ± geÃ§erli bir sayÄ± olmalÄ±")
    
    # Max reviews kontrolÃ¼
    try:
        max_reviews = int(config.get('MAX_REVIEWS_PER_CHECK', '10'))
        if max_reviews < 1 or max_reviews > 100:
            errors.append("Maksimum yorum sayÄ±sÄ± 1-100 arasÄ±nda olmalÄ±")
    except ValueError:
        errors.append("Maksimum yorum sayÄ±sÄ± geÃ§erli bir sayÄ± olmalÄ±")
    
    return errors

@app.route('/')
def index():
    """Ana sayfa"""
    config = WebConfig.read_env()
    return render_template('index.html', config=config, logs=logs[-10:], monitor_running=monitor_running)

@app.route('/settings', methods=['GET', 'POST'])
def settings():
    """Ayarlar sayfasÄ±"""
    if request.method == 'POST':
        config = {
            'SLACK_WEBHOOK_URL': request.form.get('slack_webhook_url', ''),
            'SLACK_CHANNEL': request.form.get('slack_channel', '#app-reviews'),
            'GOOGLE_PLAY_APP_ID': request.form.get('google_play_app_id', ''),
            'GOOGLE_PLAY_COUNTRY': request.form.get('google_play_country', 'all'),
            'APP_STORE_APP_ID': request.form.get('app_store_app_id', ''),
            'APP_STORE_COUNTRY': request.form.get('app_store_country', 'all'),
            'CHECK_INTERVAL_MINUTES': request.form.get('check_interval', '60'),
            'MAX_REVIEWS_PER_CHECK': request.form.get('max_reviews', '10')
        }
        
        # KonfigÃ¼rasyon doÄŸrulama
        errors = validate_config(config)
        if errors:
            for error in errors:
                flash(error, 'error')
            return redirect(url_for('settings'))
        
        # KonfigÃ¼rasyonu kaydet
        if WebConfig.write_env(config):
            add_log("Ayarlar kaydedildi", 'success')
            flash('Ayarlar baÅŸarÄ±yla kaydedildi!', 'success')
        else:
            add_log("Ayarlar kaydedilemedi", 'error')
            flash('Ayarlar kaydedilemedi!', 'error')
        return redirect(url_for('index'))
    
    config = WebConfig.read_env()
    return render_template('settings.html', config=config)

@app.route('/test_slack', methods=['POST'])
def test_slack():
    """Slack webhook test et"""
    webhook_url = request.form.get('webhook_url')
    
    if not webhook_url:
        return jsonify({'success': False, 'message': 'Webhook URL gerekli'})
    
    if not webhook_url.startswith('https://hooks.slack.com/'):
        return jsonify({'success': False, 'message': 'GeÃ§ersiz Slack Webhook URL formatÄ±'})
    
    test_message = {
        'text': 'ðŸ§ª CmmntLnd - Test MesajÄ±',
        'username': 'CmmntLnd Monitor',
        'icon_emoji': ':star:',
        'attachments': [{
            'color': 'good',
            'fields': [{
                'title': 'âœ… Test BaÅŸarÄ±lÄ±',
                'value': 'Slack entegrasyonu Ã§alÄ±ÅŸÄ±yor! WhatsApp, Facebook gibi uygulamalarÄ±nÄ±zÄ±n yorumlarÄ± buraya gelecek.',
                'short': False
            }]
        }]
    }
    
    try:
        response = requests.post(webhook_url, json=test_message, timeout=10)
        if response.status_code == 200:
            add_log("Slack webhook test baÅŸarÄ±lÄ±", 'success')
            return jsonify({'success': True, 'message': 'Test mesajÄ± baÅŸarÄ±yla gÃ¶nderildi!'})
        else:
            add_log(f"Slack webhook test hatasÄ±: {response.status_code}", 'error')
            return jsonify({'success': False, 'message': f'Hata: {response.status_code}'})
    except requests.exceptions.Timeout:
        add_log("Slack test timeout hatasÄ±", 'error')
        return jsonify({'success': False, 'message': 'BaÄŸlantÄ± zaman aÅŸÄ±mÄ±'})
    except requests.exceptions.RequestException as e:
        add_log(f"Slack test baÄŸlantÄ± hatasÄ±: {e}", 'error')
        return jsonify({'success': False, 'message': f'BaÄŸlantÄ± hatasÄ±: {str(e)}'})
    except Exception as e:
        add_log(f"Slack test genel hatasÄ±: {e}", 'error')
        return jsonify({'success': False, 'message': f'Beklenmeyen hata: {str(e)}'})

@app.route('/start_monitor', methods=['POST'])
def start_monitor():
    """Monitor'u baÅŸlat"""
    global monitor_thread, monitor_running
    
    if monitor_running:
        return jsonify({'success': False, 'message': 'Monitor zaten Ã§alÄ±ÅŸÄ±yor'})
    
    try:
        # Monitor thread'ini baÅŸlat
        monitor_thread = threading.Thread(target=run_monitor)
        monitor_thread.daemon = True
        monitor_thread.start()
        monitor_running = True
        add_log("Monitor baÅŸlatÄ±ldÄ±", 'success')
        return jsonify({'success': True, 'message': 'Monitor baÅŸlatÄ±ldÄ±!'})
    except Exception as e:
        add_log(f"Monitor baÅŸlatma hatasÄ±: {str(e)}", 'error')
        return jsonify({'success': False, 'message': f'Hata: {str(e)}'})

@app.route('/stop_monitor', methods=['POST'])
def stop_monitor():
    """Monitor'u durdur"""
    global monitor_running
    
    monitor_running = False
    add_log("Monitor durduruldu", 'info')
    return jsonify({'success': True, 'message': 'Monitor durduruldu!'})

@app.route('/logs')
def get_logs():
    """Log'larÄ± JSON olarak dÃ¶ndÃ¼r"""
    return jsonify(logs[-20:])

def run_monitor():
    """Monitor'u Ã§alÄ±ÅŸtÄ±r (thread iÃ§inde)"""
    global monitor_running
    
    try:
        from app_review_monitor import AppReviewMonitor
        from config import Config
        
        # .env dosyasÄ±nÄ± yeniden yÃ¼kle
        add_log("Monitor thread baÅŸlatÄ±lÄ±yor, ayarlar yÃ¼kleniyor...", 'info')
        from dotenv import load_dotenv
        load_dotenv()  # .env dosyasÄ±nÄ± tekrar yÃ¼kle
        
        monitor = AppReviewMonitor()
        add_log(f"Monitor hazÄ±r - Slack Webhook: {monitor.config.SLACK_WEBHOOK_URL[:50]}...", 'info')
        
        while monitor_running:
            try:
                add_log("Yorum kontrol sÃ¼reci baÅŸlatÄ±lÄ±yor...", 'info')
                monitor.check_and_send_reviews()
                add_log("Yorum kontrolÃ¼ tamamlandÄ±", 'success')
                
                # Bekleme sÃ¼resi - daha kÄ±sa aralÄ±klarla kontrol et
                for _ in range(monitor.config.CHECK_INTERVAL_MINUTES * 60):
                    if not monitor_running:
                        break
                    time.sleep(1)
                    
            except Exception as e:
                add_log(f"Monitor hatasÄ±: {str(e)}", 'error')
                time.sleep(60)  # Hata durumunda 1 dakika bekle
                
    except Exception as e:
        add_log(f"Monitor baÅŸlatma hatasÄ±: {str(e)}", 'error')
        monitor_running = False
    finally:
        # Sadece thread sonlandÄ±ÄŸÄ±nda monitor_running'i false yap
        if monitor_running:
            add_log("Monitor thread sonlandÄ±rÄ±ldÄ±", 'info')
        monitor_running = False

if __name__ == '__main__':
    add_log("Web UI baÅŸlatÄ±ldÄ±", 'info')
    app.run(debug=True, host='0.0.0.0', port=5000)
